<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>NABIJAN</title>
  
  <subtitle>NABIJAN&#39;s BLOG</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-09-19T15:09:36.470Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Nabijan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用hexo+github搭建个人博客</title>
    <link href="http://yoursite.com/2018/09/18/%E4%BD%BF%E7%94%A8hexo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2018/09/18/使用hexo-github搭建个人博客/</id>
    <published>2018-09-18T05:10:11.000Z</published>
    <updated>2018-09-19T15:09:36.470Z</updated>
    
    <content type="html"><![CDATA[<p>#使用hexo+github搭建个人博客<br><strong>前言：</strong>操作平台：ubuntu16.04</p><p>###1. 安装git<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git</span><br></pre></td></tr></table></figure></p><p>###2. 安装nodejs<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install nodejs</span><br><span class="line">sudo apt install nodejs-legacy</span><br><span class="line">sudo apt install npm</span><br></pre></td></tr></table></figure></p><p>###3. 安装hexo<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install -g hexo</span><br></pre></td></tr></table></figure></p><ul><li><p>初始化命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><ul><li>初始化完成之后打开所在的文件夹可以看到以下文件： </li></ul></li><li>node_modules：是依赖包</li><li>public：存放的是生成的页面</li><li>scaffolds：命令生成文章等的模板</li><li>source：用命令创建的各种文章</li><li>themes：主题</li><li>_config.yml：整个博客的配置</li><li>db.json：source解析所得到的</li><li>package.json：项目所需模块项目的配置信息</li></ul><p>###4. 搭桥到github</p><ul><li>创建一个repo，名称为yourname.github.io, 其中yourname是你的github名称.#####<br><img src="/img/share.jpg" alt="&quot;img1&quot;"><br><img src="/img/2018-9-18/02.png" alt="&quot;img2&quot;"></li><li>创建SSH<br>在gitbash中输入：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">"youremail@example.com</span></span><br></pre></td></tr></table></figure></li></ul><p>生成ssh。然后按下图的方式找到id_rsa.pub文件的内容。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.ssh</span><br><span class="line">cat id_rsa.pub</span><br></pre></td></tr></table></figure></p><ul><li><p>将上面获取的ssh放到github中</p></li><li><p>添加一个 New SSH key ，title随便取，key就填刚刚那一段。<br>  <img src="/img/2018-9-18/03.png" alt="&quot;img3&quot;"><br>  <img src="/img/2018-9-18/04.png" alt="&quot;img4&quot;"></p></li></ul><p>###5.部署项目</p><ul><li><p>用编辑器打开你的blog项目，修改_config.yml文件的一些配置(冒号之后都是有一个半角空格的)：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repo:</span> <span class="attr">https://github.com/YourgithubName/YourgithubName.github.io.git</span> <span class="comment">#YourgithubName是你的github的name</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure></li><li><p>进入你的blog目录，分别执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure></li></ul><p>注：hexo 3.0把服务器独立成个别模块，需要单独安装：npm i hexo-server。</p><ul><li>打开浏览器输入：<a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a></li></ul><p>###6. 上传到github<br>执行命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure></p><p><strong>注意：deploy的过程中要输入你的username及passward</strong><br>这样就成功了</p><p>###7.修改主题<br>自己浏览<a href="https://hexo.io/themes/" target="_blank" rel="noopener">hexo官网主题</a>，每个主题都有配置流程。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#使用hexo+github搭建个人博客&lt;br&gt;&lt;strong&gt;前言：&lt;/strong&gt;操作平台：ubuntu16.04&lt;/p&gt;
&lt;p&gt;###1. 安装git&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;g
      
    
    </summary>
    
      <category term="经验分享" scheme="http://yoursite.com/categories/%E7%BB%8F%E9%AA%8C%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="github" scheme="http://yoursite.com/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>Data-Mining-2018-Final-exam</title>
    <link href="http://yoursite.com/2018/09/15/Data-Mining-2018-Final-exam/"/>
    <id>http://yoursite.com/2018/09/15/Data-Mining-2018-Final-exam/</id>
    <published>2018-09-15T14:37:22.000Z</published>
    <updated>2018-09-16T09:01:39.211Z</updated>
    
    <content type="html"><![CDATA[<p>#kaggle比赛<br><strong><a href="https://www.kaggle.com/c/datamining2018-final-exam" target="_blank" rel="noopener">比赛题目</a></strong>（要求及其数据都在上面）</p><p>##1. 分类算法介绍与分析—lightGBM<br>LightGBM采用Histogram算法，其思想是将连续的浮点特征离散成k个离散值，并构造宽度为k的Histogram。然后遍历训练数据，统计每个离散值在直方图中的累计统计量。在进行特征选择时，只需要根据直方图的离散值，遍历寻找最优的分割点。<br>LightGBM 是一个梯度 boosting 框架，使用基于学习算法的决策树。它可以说是分布式的，高效的，有以下优势：</p><ul><li>更快的训练效率</li><li>低内存使用</li><li>更高的准确率</li><li>支持并行化学习</li><li>可处理大规模数据</li></ul><p>lightGBM主要有以下特点：</p><ul><li>基于Histogram的决策树算法</li><li>带深度限制的Leaf-wise的叶子生长策略</li><li>直方图做差加速</li><li>直接支持类别特征(Categorical Feature)</li><li>Cache命中率优化</li><li>基于直方图的稀疏特征优化</li><li>多线程优化</li></ul><p>在 histogram 算法之上， LightGBM 进行进一步的优化。首先它抛弃了大多数 GBDT 工具使用的按层生长(level-wise) 的决策树生长策略，而使用了带有深度限制的按叶子生长 (leaf-wise) 算法。 level-wise 过一次数据可以同时分裂同一层的叶子，容易进行多线程优化，不容易过拟合。但实际上level-wise是一种低效的算法，因为它不加区分的对待同一层的叶子，带来了很多没必要的开销。因为实际上很多叶子的分裂增益较低，没必要进行搜索和分裂。leaf-wise则是一种更为高效的策略，每次从当前所有叶子中，找到分裂增益最大(一般也是数据量最大)的一个叶子，然后分裂，如此循环。因此同 level-wise 相比，在分裂次数相同的情况下，leaf-wise 可以降低更多的误差，得到更好的精度。leaf-wise 的缺点是可能会长出比较深的决策树，产生过拟合。因此 LightGBM 在leaf-wise 之上增加了一个最大深度的限制，在保证高效率的同时防止过拟合。<br>另一个比较巧妙的优化是 histogram 做差加速。一个容易观察到的现象：一个叶子的直方图可以由它的父亲节点的直方图与它兄弟的直方图做差得到。通常构造直方图，需要遍历该叶子上的所有数据，但直方图做差仅需遍历直方图的 k 个桶。利用这个方法，LightGBM 可以在构造一个叶子的直方图后，可以用非常微小的代价得到它兄弟叶子的直方图，在速度上可以提升一倍。<br>参考文献：<a href="http://lightgbm.apachecn.org/cn/latest/Features.html" target="_blank" rel="noopener">http://lightgbm.apachecn.org/cn/latest/Features.html</a></p><p>##实验结果分析<br>在这次试验中，因为我的电脑的内存不够，直接训练的话，进程会会被杀死。而且老师提供根据类型分的样本，所以我想到了一个方法。<br><strong>方法：每个类别(class)单独训练，预测测试样本属于该类别的概率，并保存。这样最后就得到每个样本属于每个类别的概率，因此最后看每个样本属于哪个类别的概率最大，就视为该样本属于该类别。</strong><br><strong>具体步骤：先读取train_data_split的train_feat_class_000.mat，并且让其标签为1。然后从其他的类别(class)中随机取出2个，并且让其标签为0。再用新的数据去训练，然后读取test_data_raw.mat预测测试样本属于class_000的概率(lightGBM的predict返回输入样本的预测类别的概率)。然后保存下来。对每个train_feat_class_n.mat(每个类别样本)进行以上的操作就可以得到，每个样本属于每个类别的概率，最后看每个样本属于哪个类别的概率最大，就视为该样本属于该类别。</strong><br><strong><em>通过以上的方法得到正确率为18.2%</em></strong><br><strong>改进：</strong>因为有些类别的样本只有50个左右，这样的话正样本50多，负样本600左右了，结果不太好，所以我根据每个类别的样本数的大小来决定负样本的数量。<br><strong>改进后的代码：python</strong><br>这是预测每个样本属于每个类别的概率<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> h5py</span><br><span class="line"><span class="keyword">import</span> scipy.io <span class="keyword">as</span> sio</span><br><span class="line"><span class="keyword">from</span> sklearn.decomposition <span class="keyword">import</span> PCA</span><br><span class="line"><span class="keyword">import</span> lightgbm <span class="keyword">as</span> lgb</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">test = h5py.File(<span class="string">'../data/test_data_raw.mat'</span>)</span><br><span class="line">test = np.transpose(test[<span class="string">'test_feat'</span>])</span><br><span class="line">dtest = lgb.Dataset(test)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> xrange(<span class="number">0</span>,<span class="number">397</span>):</span><br><span class="line">n = <span class="string">"%03d"</span> % x</span><br><span class="line">path1 = <span class="string">'../train_data_split/train_feat_class_'</span> + n + <span class="string">'.mat'</span></span><br><span class="line">data1 = sio.loadmat(path1)</span><br><span class="line">data1 = data1[<span class="string">'train_feat_c'</span>]</span><br><span class="line">[r,c] = data1.shape</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> r &lt; <span class="number">200</span> :</span><br><span class="line">newdata = np.zeros((<span class="number">396</span> + r,<span class="number">6813</span>))</span><br><span class="line">lgb_params =  &#123;</span><br><span class="line"><span class="string">'boosting_type'</span>: <span class="string">'gbdt'</span>,</span><br><span class="line">    <span class="string">'objective'</span>: <span class="string">'binary'</span>,</span><br><span class="line">    <span class="string">'min_data_in_leaf'</span>: <span class="number">12</span>,</span><br><span class="line">    <span class="string">'num_leaves'</span>: <span class="number">8</span>,</span><br><span class="line">    <span class="string">'learning_rate'</span>: <span class="number">0.07</span>,</span><br><span class="line">    <span class="string">'verbosity'</span>:<span class="number">1</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">newdata = np.zeros((<span class="number">396</span>*<span class="number">2</span> + r,<span class="number">6813</span>))</span><br><span class="line">lgb_params =  &#123;</span><br><span class="line"><span class="string">'boosting_type'</span>: <span class="string">'gbdt'</span>,</span><br><span class="line">    <span class="string">'objective'</span>: <span class="string">'binary'</span>,</span><br><span class="line">    <span class="string">'min_data_in_leaf'</span>: <span class="number">12</span>,</span><br><span class="line">    <span class="string">'num_leaves'</span>: <span class="number">16</span>,</span><br><span class="line">    <span class="string">'learning_rate'</span>: <span class="number">0.07</span>,</span><br><span class="line">    <span class="string">'verbosity'</span>:<span class="number">1</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">newdata[<span class="number">0</span>:r,<span class="number">0</span>:<span class="number">6812</span>] = data1[:,:]</span><br><span class="line">newdata[<span class="number">0</span>:r,<span class="number">6812</span>] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">0</span>,<span class="number">397</span>):</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> i &lt; x:</span><br><span class="line">m = <span class="string">"%03d"</span> % i</span><br><span class="line">path = <span class="string">'../train_data_split/train_feat_class_'</span> + m + <span class="string">'.mat'</span></span><br><span class="line">data = sio.loadmat(path)</span><br><span class="line">data = data[<span class="string">'train_feat_c'</span>]</span><br><span class="line"></span><br><span class="line">[r1,c1] = data.shape</span><br><span class="line">select_list = range(<span class="number">0</span>,r1 - <span class="number">1</span>)</span><br><span class="line">index = random.sample(select_list,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> r &lt; <span class="number">200</span> :</span><br><span class="line">newdata[r + i,<span class="number">0</span>:<span class="number">6812</span>] = data[index[<span class="number">0</span>],:]</span><br><span class="line">newdata[r + i,<span class="number">6812</span>] = <span class="number">0</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">newdata[r + i*<span class="number">2</span>,<span class="number">0</span>:<span class="number">6812</span>] = data[index[<span class="number">0</span>],:]</span><br><span class="line">newdata[r + i*<span class="number">2</span>+<span class="number">1</span>,<span class="number">0</span>:<span class="number">6812</span>] = data[index[<span class="number">1</span>],:]</span><br><span class="line"></span><br><span class="line">newdata[r + i*<span class="number">2</span>:(i+<span class="number">1</span>)*<span class="number">2</span>,<span class="number">6812</span>] = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> i &gt; x:</span><br><span class="line">m = <span class="string">"%03d"</span> % i</span><br><span class="line">path = <span class="string">'../train_data_split/train_feat_class_'</span> + m + <span class="string">'.mat'</span></span><br><span class="line">data = sio.loadmat(path)</span><br><span class="line">data = data[<span class="string">'train_feat_c'</span>]</span><br><span class="line"></span><br><span class="line">[r1,c1] = data.shape</span><br><span class="line">select_list = range(<span class="number">0</span>,r1 - <span class="number">1</span>)</span><br><span class="line">index = random.sample(select_list,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> r &lt; <span class="number">200</span> :</span><br><span class="line">newdata[r + i<span class="number">-1</span>,<span class="number">0</span>:<span class="number">6812</span>] = data[index[<span class="number">0</span>],:]</span><br><span class="line">newdata[r + i<span class="number">-1</span>,<span class="number">6812</span>] = <span class="number">0</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">newdata[r + (i <span class="number">-1</span>)*<span class="number">2</span>,<span class="number">0</span>:<span class="number">6812</span>] = data[index[<span class="number">0</span>],:]</span><br><span class="line">newdata[r + (i <span class="number">-1</span>)*<span class="number">2</span>+<span class="number">1</span>,<span class="number">0</span>:<span class="number">6812</span>] = data[index[<span class="number">1</span>],:]</span><br><span class="line"></span><br><span class="line">newdata[r + (i <span class="number">-1</span>)*<span class="number">2</span>:i*<span class="number">2</span>,<span class="number">6812</span>] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line">dtrain = lgb.Dataset(newdata[:,<span class="number">0</span>:<span class="number">6812</span>],newdata[:,<span class="number">6812</span>])</span><br><span class="line"></span><br><span class="line">lgb.cv(lgb_params,dtrain)</span><br><span class="line"></span><br><span class="line">model = lgb.train(lgb_params,dtrain)</span><br><span class="line"></span><br><span class="line">pred = model.predict(test)</span><br><span class="line"></span><br><span class="line">pred = np.mat(pred)</span><br><span class="line">print(pred)</span><br><span class="line">path2 = <span class="string">'../data_3_result/result_'</span> + n + <span class="string">'.txt'</span></span><br><span class="line">np.savetxt(path2,pred)</span><br></pre></td></tr></table></figure></p><p>这是通过每个样本属于每个类别的概率中得到每个样本的属于类别的代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np      </span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pred = np.zeros((<span class="number">19850</span>,<span class="number">397</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> xrange(<span class="number">0</span>,<span class="number">397</span>):</span><br><span class="line">n = <span class="string">"%03d"</span> % x</span><br><span class="line">path = <span class="string">'../data_3_result/result_'</span> + n + <span class="string">'.txt'</span></span><br><span class="line">result = np.loadtxt(path)</span><br><span class="line">pred[:,x] = result</span><br><span class="line"></span><br><span class="line">print(pred.shape)</span><br><span class="line">res = []</span><br><span class="line">idn = []</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> xrange(<span class="number">0</span>,<span class="number">19850</span>):</span><br><span class="line">n = <span class="string">"%06d"</span> % (x + <span class="number">1</span>)</span><br><span class="line">res.append(np.argmax(pred[x,:]))</span><br><span class="line">idn.append(<span class="string">'img_'</span> + n)</span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line">rl =pd.DataFrame(&#123;<span class="string">'image'</span>:idn,<span class="string">'label'</span>:res&#125;)</span><br><span class="line"></span><br><span class="line">rl.to_csv(<span class="string">'../result/res2.csv'</span>,index=<span class="number">0</span>)</span><br></pre></td></tr></table></figure></p><p><strong>这样达到的得到的正确率为18.8%</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#kaggle比赛&lt;br&gt;&lt;strong&gt;&lt;a href=&quot;https://www.kaggle.com/c/datamining2018-final-exam&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;比赛题目&lt;/a&gt;&lt;/strong&gt;（要求及其数据
      
    
    </summary>
    
      <category term="数据挖掘" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98/"/>
    
    
      <category term="Data-mining" scheme="http://yoursite.com/tags/Data-mining/"/>
    
  </entry>
  
</feed>
